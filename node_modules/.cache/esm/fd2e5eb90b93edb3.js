let Router,DOMAIN,Profile,User,uploader,userAuth;_0b9‍.x([["default",()=>_0b9‍.o]]);_0b9‍.w("express",[["Router",["Router"],function(v){Router=v}]]);_0b9‍.w("../constants",[["DOMAIN",["DOMAIN"],function(v){DOMAIN=v}]]);_0b9‍.w("../models",[["Profile",["Profile"],function(v){Profile=v}],["User",["User"],function(v){User=v}]]);_0b9‍.w("../middlewares/uploader",[["default",["uploader"],function(v){uploader=v}]]);_0b9‍.w("../middlewares/auth-guard",[["userAuth",["userAuth"],function(v){userAuth=v}]]);




const multer = require("multer");
const path = require("path");
const router = Router();


const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, "./uploads");
  },
  filename: (req, file, cb) => {
    cb(null, req.decoded.name + ".jpg");
  },
});

const fileFilter = (req, file, cb) => {
  if (file.mimetype == "image/jpeg" || file.mimetype == "image/png") {
    cb(null, true);
  } else {
    cb(null, false);
  }
};

const upload = multer({
  storage: storage,
  limits: {
    fileSize: 1024 * 1024 * 6,
  },
  // fileFilter: fileFilter,
});

/**
 * @description To create profile of the authenticated User
 * @type POST <multipart-form> request
 * @api /profiles/api/create-profile
 * @access Private
 */
router.post(
  "/api/create-profile",
  userAuth,
  upload.single("avatar"),
  async (req, res) => {
    try {
      let { body, file, user } = req;
      let pathx = DOMAIN + file.path.split("uploads/")[1];
      let profile = new Profile({
        social: body,
        account: user._id,
        $set: {
          avatar: req.file.path,
        },
      });
      _0b9‍.g.console.log(pathx)
      _0b9‍.g.console.log(DOMAIN+file.path.split("uploads/")[1])
      await profile.save();
      return res.status(201).json({
        success: true,
        messgae: "Profile created successfully.",
      });
    } catch (err) {
      return res.status(400).json({
        success: false,
        messgae: "Unable to create your profile.",
      });
    }
  }
);

/**
 * @description To Get the authenticated user's profile
 * @api /profiles/api/my-profile
 * @access Private
 * @type GET
 */
router.get("/api/my-profile", userAuth, async (req, res) => {
  try {
    let profile = await Profile.findOne({ account: req.user._id }).populate(
      "account",
      "name email username"
    );
    if (!profile) {
      return res.status(404).json({
        success: false,
        message: "Your profile is not available.",
      });
    }
    return res.status(200).json({
      success: true,
      profile,
    });
  } catch (err) {
    return res.status(400).json({
      success: false,
      message: "Unable to get the profile.",
    });
  }
});

/**
 * @description To update autheticated user's profile
 * @type PUT <multipart-form> request
 * @api /profiles/api/update-profile
 * @access Private
 */
router.put(
  "/api/update-profile",
  userAuth,
  uploader.single("avatar"),
  async (req, res) => {
    try {
      let { body, file, user } = req;
      let path = DOMAIN + file.path.split("uploads/")[1];
      let profile = await Profile.findOneAndUpdate(
        { account: user._id },
        { social: body, avatar: path },
        { new: true }
      );
      return res.status(200).json({
        success: true,
        message: "Your profile is now updated",
        profile,
      });
    } catch (err) {
      return res.status(400).json({
        success: false,
        message: "Unable to get the profile.",
      });
    }
  }
);

/**
 * @description To get user's profile with the username
 * @api /profiles/api/update-profile
 * @access Public
 * @type GET
 */
router.get("/api/profile-user/:username", async (req, res) => {
  try {
    let { username } = req.params;
    let user = await User.findOne({ username });
    if (!user) {
      return res.status(404).json({
        success: false,
        message: "User not found.",
      });
    }
    let profile = await Profile.findOne({ account: user._id });
    return res.status(200).json({
      profile: {
        ...profile.toObject(),
        account: user.getUserInfo(),
      },
      success: true,
    });
  } catch (err) {
    return res.status(400).json({
      success: false,
      message: "Something went wrong.",
    });
  }
});

_0b9‍.d(router);