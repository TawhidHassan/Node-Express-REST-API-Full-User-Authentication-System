let Router,randomBytes,DOMAIN,User,validationResult,AuthenticateValidations,RegisterValidations,ResetPassword,userAuth,Validator,sendmail,join;_a09‍.x([["default",()=>_a09‍.o]]);_a09‍.w("express",[["Router",["Router"],function(v){Router=v}]]);_a09‍.w("crypto",[["randomBytes",["randomBytes"],function(v){randomBytes=v}]]);_a09‍.w("../constants",[["DOMAIN",["DOMAIN"],function(v){DOMAIN=v}]]);_a09‍.w("../models",[["User",["User"],function(v){User=v}]]);_a09‍.w("express-validator",[["validationResult",["validationResult"],function(v){validationResult=v}]]);_a09‍.w("../validators",[["AuthenticateValidations",["AuthenticateValidations"],function(v){AuthenticateValidations=v}],["RegisterValidations",["RegisterValidations"],function(v){RegisterValidations=v}],["ResetPassword",["ResetPassword"],function(v){ResetPassword=v}]]);_a09‍.w("../middlewares/auth-guard",[["userAuth",["userAuth"],function(v){userAuth=v}]]);_a09‍.w("../middlewares/validator-middleware",[["default",["Validator"],function(v){Validator=v}]]);_a09‍.w("../functions/email-sender",[["default",["sendmail"],function(v){sendmail=v}]]);_a09‍.w("path",[["join",["join"],function(v){join=v}]]);











const router = Router();

/**
 * @description To create a new User Account
 * @api /users/api/register
 * @access Public
 * @type POST
 */
 router.post("/api/register",RegisterValidations,Validator,async (req,res)=>{
   try{
    let { username, email } = req.body;
    // Check if the username is taken or not
    let user = await User.findOne({ username });
    if (user) {
      return res.status(400).json({
        success: false,
        message: "Username is already taken.",
      });
    }
    // Check if the user exists with that email
    user = await User.findOne({ email });
    if (user) {
      return res.status(400).json({
        success: false,
        message:
          "Email is already registered. Did you forget the password. Try resetting it.",
      });
    }

    user = new User({
        ...req.body,
        verificationCode: randomBytes(20).toString("hex"),
      });
      await user.save();
    // Send the email to the user with a varification link
    let html = `
    <div>
        <h1>Hello, ${user.username}</h1>
        <p>Please click the following link to verify your account</p>
        <a href="${DOMAIN}users/verify-now/${user.verificationCode}">Verify Now</a>
    </div>
    `;
    //send maill
   await sendmail(user.email,"verify Accountr","please verify account",html);
      return res.status(201).json({
        success: true,
        message:
          "Hurray! your account is created please verify your email address.",
      });


   }catch(err){
    _a09‍.g.console.log(err)
    return res.status(500).json({
        success:false,
        message:"an error occored"
    })
   }

 });


/**
 * @description To verify a new user's account via email
 * @api /users/verify-now/:verificationCode
 * @access PUBLIC <Only Via email>
 * @type GET
 */
 router.get("/verify-now/:verificationCode", async (req, res) => {
    try {
      let { verificationCode } = req.params;
      let user = await User.findOne({ verificationCode });
      if (!user) {
        return res.status(401).json({
          success: false,
          message: "Unauthorized access. Invalid verification code.",
        });
      }
      user.verified = true;
      user.verificationCode = undefined;
      await user.save();
      return res.sendFile(
        join(__dirname, "../templates/verification-success.html")
      );
    } catch (err) {
      _a09‍.g.console.log("ERR", err.message);
      return res.sendFile(join(__dirname, "../templates/errors.html"));
    }
  });
  

/**
 * @description To aiuthenticate an user and get auth token
 * @api /users/api/authenticate
 * @access PUBLIC
 * @type POST
 */
 router.post(
    "/api/authenticate",
    AuthenticateValidations,
    Validator,
    async (req, res) => {
      try {
        let { username, password } = req.body;
        let user = await User.findOne({ username });
        if (!user) {
          return res.status(404).json({
            success: false,
            message: "Username not found.",
          });
        }
        if (!(await user.comparePassword(password))) {
          return res.status(401).json({
            success: false,
            message: "Incorrect password.",
          });
        }
        let token = await user.generateJWT();
        return res.status(200).json({
          success: true,
          user: user.getUserInfo(),
          token: `Bearer ${token}`,
          message: "Hurray! You are now logged in.",
        });
      } catch (err) {
        return res.status(500).json({
          success: false,
          message: "An error occurred.",
        });
      }
    }
  );

/**
 * @description To get the authenticated user's profile
 * @api /users/api/authenticate
 * @access Private
 * @type GET
 */
 router.get("/api/authenticate", userAuth, async (req, res) => {
    return res.status(200).json({
      user: req.user,
    });
  });


/**
 * @description To initiate the password reset process
 * @api /users/api/reset-password
 * @access Public
 * @type POST
 */
 router.put(
    "/api/reset-password",
    ResetPassword,
    Validator,
    async (req, res) => {
      try {
        let { email } = req.body;
        let user = await User.findOne({ email });
        if (!user) {
          return res.status(404).json({
            success: false,
            message: "User with the email is not found.",
          });
        }
        user.generatePasswordReset();
        await user.save();
        // Sent the password reset Link in the email.
        let html = `
          <div>
              <h1>Hello, ${user.username}</h1>
              <p>Please click the following link to reset your password.</p>
              <p>If this password reset request is not created by your then you can inore this email.</p>
              <a href="${DOMAIN}users/reset-password-now/${user.resetPasswordToken}">Verify Now</a>
          </div>
        `;
        await sendmail(
          user.email,
          "Reset Password",
          "Please reset your password.",
          html
        );
        return res.status(404).json({
          success: true,
          message: "Password reset link is sent your email.",
        });
      } catch (err) {
        return res.status(500).json({
          success: false,
          message: "An error occurred.",
        });
      }
    }
  );
  


  /**
 * @description To resnder reset password page
 * @api /users/reset-password/:resetPasswordToken
 * @access Restricted via email
 * @type GET
 */
router.get("/reset-password-now/:resetPasswordToken", async (req, res) => {
    try {
      let { resetPasswordToken } = req.params;
      let user = await User.findOne({
        resetPasswordToken,
        resetPasswordExpiresIn: { $gt: Date.now() },
      });
      if (!user) {
        return res.status(401).json({
          success: false,
          message: "Password reset token is invalid or has expired.",
        });
      }
      return res.sendFile(join(__dirname, "../templates/password-reset.html"));
    } catch (err) {
      return res.sendFile(join(__dirname, "../templates/errors.html"));
    }
  });

/**
 * @description To reset the password
 * @api /users/api/reset-password-now
 * @access Restricted via email
 * @type POST
 */
 router.post("/api/reset-password-now", async (req, res) => {
    try {
      let { resetPasswordToken, password } = req.body;
      let user = await User.findOne({
        resetPasswordToken,
        resetPasswordExpiresIn: { $gt: Date.now() },
      });
      if (!user) {
        return res.status(401).json({
          success: false,
          message: "Password reset token is invalid or has expired.",
        });
      }
      user.password = password;
      user.resetPasswordToken = undefined;
      user.resetPasswordExpiresIn = undefined;
      await user.save();
      // Send notification email about the password reset successfull process
      let html = `
          <div>
              <h1>Hello, ${user.username}</h1>
              <p>Your password is resetted successfully.</p>
              <p>If this rest is not done by you then you can contact our team.</p>
          </div>
        `;
      await sendmail(
        user.email,
        "Reset Password Successful",
        "Your password is changed.",
        html
      );
      return res.status(200).json({
        success: true,
        message:
          "Your password reset request is complete and your password is resetted successfully. Login into your account with your new password.",
      });
    } catch (err) {
      return res.status(500).json({
        sucess: false,
        message: "Something went wrong.",
      });
    }
  });

_a09‍.d(router);